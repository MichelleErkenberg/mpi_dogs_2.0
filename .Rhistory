)
heatmap_vito <- ggplot(data_container, aes(x = x, y = y, fill = Vito)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue", limits = c(0, 1)) +
scale_x_continuous(breaks = unique(data_container$X)) +
scale_y_continuous(breaks = unique(data_container$Y)) +
coord_fixed() +
labs(title = "Heatmap for Vito") +
theme_minimal() +
theme(
axis.title = element_blank(),
panel.grid = element_blank(),
axis.text = element_blank(),
legend.title = element_blank()
)
heatmap_fritzy <- ggplot(data_container, aes(x = x, y = y, fill = Fritzy)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue", limits = c(0, 1)) +
scale_x_continuous(breaks = unique(data_container$X)) +
scale_y_continuous(breaks = unique(data_container$Y)) +
coord_fixed() +
labs(title = "Heatmap for Fritzy") +
theme_minimal() +
theme(
axis.title = element_blank(),
panel.grid = element_blank(),
axis.text = element_blank(),
legend.title = element_blank()
)
heatmap_urza <- ggplot(data_container, aes(x = x, y = y, fill = Urza)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue", limits = c(0, 1)) +
scale_x_continuous(breaks = unique(data_container$X)) +
scale_y_continuous(breaks = unique(data_container$Y)) +
coord_fixed() +
labs(title = "Heatmap for Urza") +
theme_minimal() +
theme(
axis.title = element_blank(),
panel.grid = element_blank(),
axis.text = element_blank(),
legend.title = element_blank()
)
print(heatmap_heidi)
print(heatmap_vito)
print(heatmap_fritzy)
print(heatmap_urza)
combined_plot_container <- grid.arrange(heatmap_fritzy, heatmap_heidi, heatmap_urza, heatmap_vito, ncol = 2)
ggsave("figures/container_office_dogs_heatmap.png", combined_plot_container, width = 16, height = 16)
data_thorA_lily <- read.csv("data/dog_samples/R_prep/all_dogs/R_split/Mimi_Linda.csv")
# Heatmap for each dog
heatmap_lily <- ggplot(data_thorA_lily, aes(x = x, y = y, fill = Lily)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue", limits = c(0, 1)) +
scale_x_continuous(breaks = unique(data_thorA_lily$X)) +
scale_y_continuous(breaks = unique(data_thorA_lily$Y)) +
coord_fixed() +
labs(title = "Heatmap for Lily") +
theme_minimal() +
theme(
axis.title = element_blank(),
panel.grid = element_blank(),
axis.text = element_blank(),
legend.title = element_blank()
)
heatmap_thorA <- ggplot(data_thorA_lily, aes(x = x, y = y, fill = ThorA)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue", limits = c(0, 1)) +
scale_x_continuous(breaks = unique(data_thorA_lily$X)) +
scale_y_continuous(breaks = unique(data_thorA_lily$Y)) +
coord_fixed() +
labs(title = "Heatmap for ThorA") +
theme_minimal() +
theme(
axis.title = element_blank(),
panel.grid = element_blank(),
axis.text = element_blank(),
legend.title = element_blank()
)
print(heatmap_lily)
print(heatmap_thorA)
combined_plot_thorA_lily <- grid.arrange(heatmap_lily, heatmap_thorA, ncol = 1)
ggsave("figures/thorA_lily_office_dogs_heatmap.png", combined_plot_thorA_lily, width = 16, height = 16)
library(data.table)
library(ggplot2)
# Set working directory
setwd("~/github/mpi_dogs_2.0/")
# Read the main CSV file with dog data
dt.main <- fread('data/dog_samples/R_prep/all_dogs_with_ThorA_Cami_without_Lily/R_prep_sample_vs_dog_all_dogs_with_ThorA_Cami_without_Lily_10snp.csv', na.strings = c('-', 'NA', ''))
# Read the TXT file with location categories
dt.categories <- fread('data/dog_samples/R_prep/sample_location.txt', na.strings = c('-', 'NA', ''))
# Read the new TSV file for filtering
dt.filter <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-', 'NA', ''))
# Define the threshold for ReadsDeduped
reads_threshold <- 50
# Filter the new TSV file based on conditions
dt.filter_valid <- dt.filter[Family == "Canidae" & ReadsDeduped >= reads_threshold]
# Get the list of sample_ids that meet the criteria
valid_samples <- dt.filter_valid$sample_id
# Filter the main data to include only valid samples
dt.main_filtered <- dt.main[sample_id %in% valid_samples]
# Define custom order for locations
custom_order <- c("Dog Office (Container)", "Dog Office (Lily/ThorA)", "Hallway (Lily/ThorA)",
"Dog Office (Anda/Charlie)", "Hallway (Anda/Charlie)", "Non-Dog Office",
"Elevator", "Main Entrance", "Lab (PCR Lab)", "Lab (Cleanroom)",
"Negativ Control")
# Merge main data with categories
dt.combined <- merge(dt.main_filtered, dt.categories, by = "sample_id", all.x = TRUE)
# Reshape data to long format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
# Extract number from sample_id for sorting
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
# Sort data by location and sample_number
setorder(dt.long, location, sample_number)
# Apply custom order to location factor
dt.long$location <- factor(dt.long$location, levels = custom_order)
# Create the bar plot with asterisks for NA values
p <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = value, fill = dog),
stat = "identity", position = "dodge") +
# Add asterisks for NA values (valid samples with missing data)
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
# Save the plot
ggsave("figures/dogs_categorized_10snp_50readsdeduped.png", p, width = 24, height = 20, limitsize = FALSE)
library(data.table)
library(ggplot2)
library(gridExtra)
## Set working directory
setwd("~/github/mpi_dogs_2.0/")
## Read in the txt file to define whether it is a dog office or not
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
# Define thresholds
threshold_readsraw <- 15000
threshold_readsdeduped <- 50
# Filter based on ReadsRaw threshold
dt.tax_filtered_raw <- dt.tax[ReadsRaw >= threshold_readsraw]
# Print information about removed samples based on ReadsRaw
removed_samples_raw <- nrow(dt.tax) - nrow(dt.tax_filtered_raw)
print(paste("Removed", removed_samples_raw, "samples below the threshold of", threshold_readsraw, "raw reads."))
## Split dog_office data
dog_office_samples <- dt.dog_office[category2 == "dog_office", sample_id]
non_dog_office_samples <- dt.dog_office[category2 != "dog_office", sample_id]
## Filter tax data for dog_office and non_dog_office samples
dt.tax_dog_office <- dt.tax_filtered_raw[sample_id %in% dog_office_samples]
dt.tax_non_dog_office <- dt.tax_filtered_raw[sample_id %in% non_dog_office_samples]
## Define family order and custom colors
family_order <- c('Hominidae', 'Canidae', 'Felidae', 'Suidae')
custom_colors <- c("Hominidae" = "#fed976", "Canidae" = "#35978f",
"Felidae" = "#9970ab", "Suidae" = "#4575b4")
## Function to process data for bar plots and pie charts
process_data <- function(dt, relevant_families, threshold_deduped) {
dt <- dt[Family %in% relevant_families & ReadsDeduped >= threshold_deduped]
list(
bar_data = dt[, .(count = uniqueN(sample_id)), by = Family],
pie_data = dt[, .(ReadsDeduped = sum(ReadsDeduped)), by = Family]
)
}
## Set parameters
relevant_families <- c('Hominidae', 'Canidae', 'Felidae', 'Suidae')
## Process data
results_dog_office <- process_data(dt.tax_dog_office, relevant_families, threshold_readsdeduped)
results_non_dog_office <- process_data(dt.tax_non_dog_office, relevant_families, threshold_readsdeduped)
## Create bar plot function
create_plot <- function(data, title) {
if (nrow(data) == 0) return(NULL)
ggplot(data, aes(x = factor(Family, levels = family_order), y = count, fill = Family)) +
geom_bar(stat = "identity") +
geom_text(aes(label = count), vjust = -0.3) +
theme_minimal() +
labs(title = title, x = "Family", y = "Number of Samples") +
theme(legend.position = "none") +
scale_fill_manual(values = custom_colors)
}
## Create pie chart function
create_pie_chart <- function(data, title) {
if (nrow(data) == 0) return(NULL)
data$Family <- factor(data$Family, levels = family_order)
ggplot(data, aes(x = "", y = ReadsDeduped, fill = Family)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
labs(title = title) +
geom_text(aes(label = paste0(round(ReadsDeduped/sum(ReadsDeduped)*100, 1), "%")),
position = position_stack(vjust = 0.5)) +
scale_fill_manual(values = custom_colors)
}
## Create plots
plot_dog_office <- create_plot(results_dog_office$bar_data, "Dog Office Samples")
plot_non_dog_office <- create_plot(results_non_dog_office$bar_data, "Non-Dog Office Samples")
pie_dog_office <- create_pie_chart(results_dog_office$pie_data, "Dog Office")
pie_non_dog_office <- create_pie_chart(results_non_dog_office$pie_data, "Non-Dog Office")
## Combine all plots
combined_plot <- grid.arrange(
plot_dog_office, plot_non_dog_office,
pie_dog_office, pie_non_dog_office,
ncol = 2
)
## Save combined plot
ggsave("figures/combined_samples_count_and_reads.png", combined_plot, width = 16, height = 16)
library(data.table)
library(ggplot2)
library(gridExtra)
library(cowplot)
## Set working directory
setwd("~/github/mpi_dogs_2.0/")
## Read in the txt file with dog office and category information
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
## Merge dt.tax with dt.dog_office to include category information
dt.tax_filtered <- merge(dt.tax, dt.dog_office[, .(sample_id, category, category2, office)], by="sample_id", all.x=TRUE)
## Filter for only Hominidae and Canidae families
relevant_families <- c('Hominidae', 'Canidae')
dt.tax_filtered <- dt.tax_filtered[Family %in% relevant_families]
## Add wall information, treating empty categories as "No Wall"
dt.tax_filtered[, is_wall := ifelse(category == "wall", "Wall", "No Wall")]
dt.tax_filtered[is.na(is_wall) | is_wall == "", is_wall := "No Wall"]
dt.tax_filtered[, .N, category]
## Define offices to exclude
## also, the negative samples aren't all in NC?
#     sample_number           sample_id              office office_number     x
# 85:            85 negative_sample_gr1                <NA>          <NA>    NA
# 86:            86 negative_sample_gr2                <NA>          <NA>    NA
# 87:            87 negative_sample_gr3                <NA>          <NA>    NA
# 88:            88 negative_sample_gr4                <NA>          <NA>    NA
offices_to_exclude <- c("NC", "Mimi/Linda Hallway", "Tracy/Silke Hallway", "Main Entrance")
## Filter out the excluded offices
dt.tax_filtered <- dt.tax_filtered[!office %in% offices_to_exclude]
## List the included offices
dt.tax_filtered[, .N, office]
dt.tax_filtered[is.na(office)]
## Define custom color scheme
custom_colors <- c("Canidae" = "#35978f", "Hominidae" = "#fed976")
## Function to create a single boxplot with custom colors
create_single_boxplot <- function(data, title, x_label) {
p <- ggplot(data, aes(x = is_wall, y = ReadsDeduped + 1, fill = Family)) +
geom_boxplot(width = 0.7, alpha = 0.7) +
stat_summary(fun = median, geom = "point", shape = 18, size = 3, color = "black") +
scale_y_log10(labels = scales::comma) +
scale_fill_manual(values = custom_colors) +
theme_bw() +
labs(title = title, x = x_label, y = "ReadsDeduped (log10 scale)")
r.w <- data[is_wall == 'Wall', mean(ReadsDeduped)]
r.o <- data[is_wall == 'No Wall', mean(ReadsDeduped)]
cat('Avg  wall reads:', r.w, '\n')
cat('Avg !wall reads:', r.o, '\n')
cat('Ratio:', r.w/r.o, '\n')
return(p)
}
## Creating the four separate plots
plot_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Canidae"],
"Dog Office: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae"],
"Dog Office: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Canidae"],
"Non-Dog Location: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae"],
"Non-Dog Location: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
## Combine plots
combined_plots <- plot_grid(
plot_dog_office_canidae,
plot_non_dog_office_canidae,
plot_dog_office_hominidae,
plot_non_dog_office_hominidae,
ncol = 2
)
print(combined_plots)
library(data.table)
library(ggplot2)
library(gridExtra)
library(cowplot)
## Set working directory
setwd("~/github/mpi_dogs_2.0/")
## Read in the txt file with dog office and category information
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
## Merge dt.tax with dt.dog_office to include category information
dt.tax_filtered <- merge(dt.tax, dt.dog_office[, .(sample_id, category, category2, office)], by="sample_id", all.x=TRUE)
## Filter for only Hominidae and Canidae families
relevant_families <- c('Hominidae', 'Canidae')
dt.tax_filtered <- dt.tax_filtered[Family %in% relevant_families]
## Add wall information, treating empty categories as "No Wall"
dt.tax_filtered[, is_wall := ifelse(category == "wall", "Wall", "No Wall")]
dt.tax_filtered[is.na(is_wall) | is_wall == "", is_wall := "No Wall"]
dt.tax_filtered[, .N, category]
## Define offices to exclude
## also, the negative samples aren't all in NC?
#     sample_number           sample_id              office office_number     x
# 85:            85 negative_sample_gr1                <NA>          <NA>    NA
# 86:            86 negative_sample_gr2                <NA>          <NA>    NA
# 87:            87 negative_sample_gr3                <NA>          <NA>    NA
# 88:            88 negative_sample_gr4                <NA>          <NA>    NA
offices_to_exclude <- c("NC", "Mimi/Linda Hallway", "Tracy/Silke Hallway", "Main Entrance")
## Filter out the excluded offices
dt.tax_filtered <- dt.tax_filtered[!office %in% offices_to_exclude]
## List the included offices
dt.tax_filtered[, .N, office]
dt.tax_filtered[is.na(office)]
## Define custom color scheme
custom_colors <- c("Canidae" = "#35978f", "Hominidae" = "#fed976")
## Function to create a single boxplot with custom colors
create_single_boxplot <- function(data, title, x_label) {
p <- ggplot(data, aes(x = is_wall, y = ReadsDeduped + 1, fill = Family)) +
geom_boxplot(width = 0.7, alpha = 0.7) +
stat_summary(fun = median, geom = "point", shape = 18, size = 3, color = "black") +
scale_y_log10(labels = scales::comma) +
scale_fill_manual(values = custom_colors) +
theme_bw() +
labs(title = title, x = x_label, y = "ReadsDeduped (log10 scale)")
r.w <- data[is_wall == 'Wall', mean(ReadsDeduped)]
r.o <- data[is_wall == 'No Wall', mean(ReadsDeduped)]
cat('Avg  wall reads:', r.w, '\n')
cat('Avg !wall reads:', r.o, '\n')
cat('Ratio:', r.w/r.o, '\n')
return(p)
}
## Creating the four separate plots
plot_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Canidae"],
"Dog Office: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae"],
"Dog Office: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Canidae"],
"Non-Dog Location: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae"],
"Non-Dog Location: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
## Combine plots
combined_plots <- plot_grid(
plot_dog_office_canidae,
plot_non_dog_office_canidae,
plot_dog_office_hominidae,
plot_non_dog_office_hominidae,
ncol = 2
)
print(combined_plots)
## Saving the combined plot
ggsave("figures/walls_vs_no_walls.png", combined_plots, width = 16, height = 16)
library(data.table)
library(ggplot2)
# Set working directory
setwd("~/github/mpi_dogs_2.0/")
dt.main <- fread('data/dog_samples/R_prep/all_dogs_with_ThorA_Cami_without_Lily/R_prep_sample_vs_dog_all_dogs_with_ThorA_Cami_without_Lily_10snp.csv', na.strings = c('-', 'NA', ''))
# Read the TXT file with location categories
dt.categories <- fread('data/dog_samples/R_prep/sample_location.txt', na.strings = c('-', 'NA', ''))
# Define custom order for locations (adjust this list as needed)
custom_order <- c("Dog Office (Container)", "Dog Office (Lily/ThorA)", "Hallway (Lily/ThorA)", "Dog Office (Anda/Charlie)", "Hallway (Anda/Charlie)", "Non-Dog Office", "Elevator", "Main Entrance", "Lab (PCR Lab)", "Lab (Cleanroom)", "Negativ Control")  # Beispiel: Reihenfolge der Locations
# Merge main data with categories
dt.combined <- merge(dt.main, dt.categories, by = "sample_id", all.x = TRUE)
# Identify dog columns (all columns except sample_id and location)
dog_columns <- setdiff(names(dt.combined), c("sample_id", "location"))
# Reshape data to long format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
# Replace NA values in the value column with NA (keine Balken für fehlende Werte)
dt.long[, value := ifelse(is.na(value), NA, value)]
# Extract number from sample_id for sorting
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
# Sort data by location and sample_number
setorder(dt.long, location, sample_number)
# Apply custom order to location factor
if (length(custom_order) > 0) {
dt.long$location <- factor(dt.long$location, levels = custom_order)
} else {
dt.long$location <- factor(dt.long$location, levels = unique(dt.long$location))
}
# Create the bar plot ensuring only relevant sample_ids are shown for each location
p <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = value, fill = dog),
stat = "identity", position = "dodge") +
# Add asterisks for NA values at the correct positions
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location",
x = "Sample ID", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
# Apply custom colors if defined
custom_colors <- c()  # Add your custom colors here if needed
if (length(custom_colors) > 0) {
p <- p + scale_fill_manual(values = custom_colors)
}
print(p)
# Save the plot
#ggsave("figures/dogs_categorized_2snp.png", p, width = 24, height = length(dog_columns) * 2, limitsize = FALSE)
#ggsave("figures/dogs_categorized_5snp.png", p, width = 24, height = length(dog_columns) * 2, limitsize = FALSE)
ggsave("figures/dogs_categorized_10snp.png", p, width = 24, height = length(dog_columns) * 2, limitsize = FALSE)
library(data.table)
library(ggplot2)
library(dplyr)
## Set working directory
setwd("~/github/mpi_dogs_2.0/")
## Read in the txt file with dog office and category information
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
# Define threshold
threshold_reads <- 15000
## Filter and prepare the data
dt.tax_filtered <- merge(dt.tax, dt.dog_office[, .(sample_id, category, category2, office)], by="sample_id", all.x=TRUE)
dt.tax_filtered <- dt.tax_filtered[ReadsRaw >= threshold_reads]
dt.tax_filtered <- dt.tax_filtered[Family %in% c('Hominidae', 'Canidae')]
# Print information about removed samples
total_samples <- nrow(dt.tax)
filtered_samples <- nrow(dt.tax_filtered)
removed_samples <- total_samples - filtered_samples
print(paste("Removed", removed_samples, "samples below the threshold of", threshold_reads, "reads."))
## Define family order and custom colors
custom_colors <- c("Hominidae" = "#fed976", "Canidae" = "#35978f")
## Extract unique categories
unique_categories <- unique(dt.dog_office$category2)
print(unique_categories)
## Manual adjustments
category_mapping <- c(
"dog_office" = "Dog Office",
"main-entrance" = "Main Entrance",
"elevator" = "Elevator",
"hallway" = "Hallway",
"nc_office" = "No Dog Office",
"nc" = "Negative Control",
"lab" = "Lab"
)
## Apply the mapping to create the Category column
dt.tax_filtered[, Category := factor(category2, levels = names(category_mapping), labels = category_mapping)]
## Create a new column for combined category labels, only for "lab" category
dt.tax_filtered[, CategoryLabel := ifelse(category2 == "lab",
paste0(Category, " (", office, ")"),
as.character(Category))]
# unique lab categories
lab_categories <- sort(unique(dt.tax_filtered[category2 == "lab", CategoryLabel]))
# define order
custom_order <- c(
"Negative Control",
lab_categories[1],  # "Lab (Cleanroom)"
lab_categories[2],  # "Lab (PCR Lab)"
"No Dog Office",
"Hallway",
"Elevator",
"Main Entrance",
"Dog Office"
)
## Ensure the order of categories is preserved with the custom order
dt.tax_filtered[, ReadsDeduped := ReadsDeduped + 1]
## Count unique samples per location after filtering
sample_counts <- dt.tax_filtered[, .(N = uniqueN(sample_id)), by = .(CategoryLabel)][
, CategoryLabel := factor(CategoryLabel, levels = custom_order)
][order(CategoryLabel)]
## Create new labels with sample counts
sample_counts[, CategoryLabelWithCount := paste0(CategoryLabel, "\n(n = ", N, ")")]
## Update factor levels in the main dataset
dt.tax_filtered[, CategoryLabelWithCount := factor(
CategoryLabel,
levels = sample_counts$CategoryLabel,
labels = sample_counts$CategoryLabelWithCount
)]
## Create the plot
ggplot(dt.tax_filtered, aes(x = ReadsDeduped, y = CategoryLabelWithCount, fill = Family)) +
geom_boxplot(position = position_dodge(width = 0.8), width = 0.7, alpha = 0.7) +
coord_cartesian(xlim = c(1, max(dt.tax_filtered$ReadsDeduped, na.rm = TRUE))) +
scale_x_log10(labels = scales::comma) +
theme_bw() +
labs(title = "Distribution of Reads by Location and Family",
x = "mtDNA (log10 scale)",
y = "Location",
fill = "Family") +
theme(
legend.position = "bottom",
legend.box.just = "center",
legend.margin = margin(t = 0, r = 0, b = 0, l = 0)) +
scale_fill_manual(values = custom_colors)
## Save the plot
ggsave("figures/category_family_distribution.png", width = 12, height = 10)
