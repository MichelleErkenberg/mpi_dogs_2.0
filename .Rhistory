# Read the main CSV file with dog data
dt.main <- fread('data/dog_samples/R_prep/all_dogs_with_ThorA_Cami_without_Lily/R_prep_sample_vs_dog_all_dogs_with_ThorA_Cami_without_Lily_10snp.csv', na.strings = c('-', 'NA', ''))
# Read the TXT file with location categories
dt.categories <- fread('data/dog_samples/R_prep/sample_location.txt', na.strings = c('-', 'NA', ''))
# Read the new TSV file for filtering
dt.filter <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-', 'NA', ''))
# Define the threshold for ReadsDeduped
reads_threshold <- 50
# Filter the new TSV file based on conditions
dt.filter_valid <- dt.filter[Family == "Canidae" & ReadsDeduped >= reads_threshold]
View(dt.filter_valid)
# Get the list of sample_ids that meet the criteria
valid_samples <- dt.filter_valid$sample_id
# Filter the main data to include only valid samples
dt.main_filtered <- dt.main[sample_id %in% valid_samples]
# Define custom order for locations
custom_order <- c("Dog Office (Container)", "Dog Office (Lily/ThorA)", "Hallway (Lily/ThorA)",
"Dog Office (Anda/Charlie)", "Hallway (Anda/Charlie)", "Non-Dog Office",
"Elevator", "Main Entrance", "Lab (PCR Lab)", "Lab (Cleanroom)",
"Negativ Control")
View(dt.categories)
# Merge main data with categories
dt.combined <- merge(dt.main_filtered, dt.categories, dt.filter_valid, by = "sample_id", all.x = TRUE)
# Merge main data with categories
dt.combined <- merge(dt.main_filtered, dt.categories, by = "sample_id", all.x = TRUE)
readsdeduped <- dt.filter_valid$ReadsDeduped
# Filter the main data to include only valid samples
dt.main_filtered <- dt.main[sample_id %in% valid_samples]
View(dt.main_filtered)
dt.main_filtered_reads <- c(dt.main_filtered, readsdeduped)
View(dt.main_filtered_reads)
dt.main_filtered_reads <- c(dt.main_filtered, dt.filter_valid$ReadsDeduped )
dt.main_filtered_reads <- rbind(dt.main_filtered, dt.filter_valid$ReadsDeduped )
View(dt.filter_valid)
dt.filter_valid_reads <- dt.filter_valid[sample_id %in% valid_samples]
dt.main_filtered_reads <- rbind(dt.main_filtered, dt.filter_valid_reads)
View(dt.filter_valid_reads)
View(dt.main_filtered)
library(data.table)
library(ggplot2)
library(dplyr)
# Set working directory
setwd("~/github/mpi_dogs_2.0/")
# Read the main CSV file with dog data
dt.main <- fread('data/dog_samples/R_prep/all_dogs_with_ThorA_Cami_without_Lily/R_prep_sample_vs_dog_all_dogs_with_ThorA_Cami_without_Lily_10snp.csv', na.strings = c('-', 'NA', ''))
# Read the TXT file with location categories
dt.categories <- fread('data/dog_samples/R_prep/sample_location.txt', na.strings = c('-', 'NA', ''))
# Read the new TSV file for filtering
dt.filter <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-', 'NA', ''))
# Define the threshold for ReadsDeduped
reads_threshold <- 50
# Filter the new TSV file based on conditions
dt.filter_valid <- dt.filter[Family == "Canidae" & ReadsDeduped >= reads_threshold]
# Get the list of sample_ids and readsdeduped that meet the criteria
valid_samples <- dt.filter_valid$sample_id
# Filter the main data to include only valid samples
dt.main_filtered <- dt.main[sample_id %in% valid_samples]
dt.filter_valid_reads <- dt.filter_valid[sample_id %in% valid_samples]
View(dt.filter_valid_reads)
View(dt.main_filtered)
dt.main_filtered_reads <- mutate(dt.main_filtered, dt.filter_valid_reads$ReadsDeduped)
View(dt.main_filtered_reads)
dt.main_filtered_reads %>% rename(dt.filter_valid_reads$ReadsDeduped = ReadsDeduped)
dt.main_filtered_reads %>% rename(ReadsDeduped = dt.filter_valid_reads$ReadsDeduped)
View(dt.main_filtered_reads)
colnames(dt.main_filtered_reads)
names(dt.main_filtered_reads)[names(dt.main_filtered_reads) == "dt.filter_valid_reads$ReadsDeduped"] <- "ReadsDeduped"
# Define custom order for locations
custom_order <- c("Dog Office (Container)", "Dog Office (Lily/ThorA)", "Hallway (Lily/ThorA)",
"Dog Office (Anda/Charlie)", "Hallway (Anda/Charlie)", "Non-Dog Office",
"Elevator", "Main Entrance", "Lab (PCR Lab)", "Lab (Cleanroom)",
"Negativ Control")
# Merge main data with categories
dt.combined <- merge(dt.main_filtered_reads, dt.categories, by = "sample_id", all.x = TRUE)
View(dt.combined)
# Reshape data to long format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location", "ReadsDeduped"),
variable.name = "dog", value.name = "value")
View(dt.long)
# Extract number from sample_id for sorting
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
# Sort data by location and sample_number
setorder(dt.long, location, sample_number)
# Apply custom order to location factor
dt.long$location <- factor(dt.long$location, levels = custom_order)
# Create the bar plot with asterisks for NA values
p <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = value, fill = dog),
stat = "identity", position = "dodge") +
# Add asterisks for NA values (valid samples with missing data)
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
p_reads <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(ReadsDeduped), y = value, fill = dog),
stat = "identity", position = "dodge") +
# Add asterisks for NA values (valid samples with missing data)
geom_text(data = dt.long[is.na(value)], aes(x = factor(ReadsDeduped), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "ReadsDeduped", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p_reads)
p_reads <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = ReadsDeduped, fill = dog),
stat = "identity", position = "dodge") +
# Add asterisks for NA values (valid samples with missing data)
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "sample_id", y = "ReadsDeduped", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p_reads)
View(dt.long)
?plot_grid
??plot_grid
plot_grid
library(plot_grid)
install.packages(plot_grid)
install.packages(cowplot)
install.packages("cowplot")
plot_grid(p, p_reads)
library(ggplot2)
plot_grid(p, p_reads)
install.packages("plot_gird")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
df <- data.frame(
x = 1:10, y1 = 1:10, y2 = (1:10)^2, y3 = (1:10)^3, y4 = (1:10)^4
)
p1 <- ggplot(df, aes(x, y1)) + geom_point()
p2 <- ggplot(df, aes(x, y2)) + geom_point()
p3 <- ggplot(df, aes(x, y3)) + geom_point()
p4 <- ggplot(df, aes(x, y4)) + geom_point()
p5 <- ggplot(mpg, aes(as.factor(year), hwy)) +
geom_boxplot() +
facet_wrap(~class, scales = "free_y")
# simple grid
plot_grid(p1, p2, p3, p4)
library(cowplot)
df <- data.frame(
x = 1:10, y1 = 1:10, y2 = (1:10)^2, y3 = (1:10)^3, y4 = (1:10)^4
)
p1 <- ggplot(df, aes(x, y1)) + geom_point()
p2 <- ggplot(df, aes(x, y2)) + geom_point()
p3 <- ggplot(df, aes(x, y3)) + geom_point()
p4 <- ggplot(df, aes(x, y4)) + geom_point()
p5 <- ggplot(mpg, aes(as.factor(year), hwy)) +
geom_boxplot() +
facet_wrap(~class, scales = "free_y")
# simple grid
plot_grid(p1, p2, p3, p4)
# simple grid with labels and aligned plots
plot_grid(
p1, p2, p3, p4,
labels = c('A', 'B', 'C', 'D'),
align="hv"
)
# manually setting the number of rows, auto-generate upper-case labels
plot_grid(p1, p2, p3,
nrow = 3,
labels = "AUTO",
label_size = 12,
align = "v"
)
# making rows and columns of different widths/heights
plot_grid(
p1, p2, p3, p4,
align = 'hv',
rel_heights = c(2,1),
rel_widths = c(1,2)
)
# aligning complex plots in a grid
plot_grid(
p1, p5,
align = "h", axis = "b", nrow = 1, rel_widths = c(1, 2)
)
#' # missing plots in some grid locations, auto-generate lower-case labels
plot_grid(
p1, NULL, NULL, p2, p3, NULL,
ncol = 2,
labels = "auto",
label_size = 12,
align = "v"
)
library(data.table)
library(ggplot2)
library(dplyr)
library(cowplot)
# Set working directory
setwd("~/github/mpi_dogs_2.0/")
# Read the main CSV file with dog data
dt.main <- fread('data/dog_samples/R_prep/all_dogs_with_ThorA_Cami_without_Lily/R_prep_sample_vs_dog_all_dogs_with_ThorA_Cami_without_Lily_10snp.csv', na.strings = c('-', 'NA', ''))
# Read the TXT file with location categories
dt.categories <- fread('data/dog_samples/R_prep/sample_location.txt', na.strings = c('-', 'NA', ''))
# Read the new TSV file for filtering
dt.filter <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-', 'NA', ''))
# Define the threshold for ReadsDeduped
reads_threshold <- 50
# Filter the new TSV file based on conditions
dt.filter_valid <- dt.filter[Family == "Canidae" & ReadsDeduped >= reads_threshold]
# Get the list of sample_ids and readsdeduped that meet the criteria
valid_samples <- dt.filter_valid$sample_id
# Filter the main data to include only valid samples and add + rename ReadsDeduped
dt.main_filtered <- dt.main[sample_id %in% valid_samples]
dt.filter_valid_reads <- dt.filter_valid[sample_id %in% valid_samples]
dt.main_filtered_reads <- mutate(dt.main_filtered, dt.filter_valid_reads$ReadsDeduped)
names(dt.main_filtered_reads)[names(dt.main_filtered_reads) == "dt.filter_valid_reads$ReadsDeduped"] <- "ReadsDeduped"
# Define custom order for locations
custom_order <- c("Dog Office (Container)", "Dog Office (Lily/ThorA)", "Hallway (Lily/ThorA)",
"Dog Office (Anda/Charlie)", "Hallway (Anda/Charlie)", "Non-Dog Office",
"Elevator", "Main Entrance", "Lab (PCR Lab)", "Lab (Cleanroom)",
"Negativ Control")
# Merge main data with categories
dt.combined <- merge(dt.main_filtered_reads, dt.categories, by = "sample_id", all.x = TRUE)
# Reshape data to long format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location", "ReadsDeduped"),
variable.name = "dog", value.name = "value")
# Extract number from sample_id for sorting
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
# Sort data by location and sample_number
setorder(dt.long, location, sample_number)
# Apply custom order to location factor
dt.long$location <- factor(dt.long$location, levels = custom_order)
# Create the bar plot with asterisks for NA values
p <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = value, fill = dog),
stat = "identity", position = "dodge") +
# Add asterisks for NA values (valid samples with missing data)
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
p_reads <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = ReadsDeduped, fill = dog),
stat = "identity", position = "dodge") +
# Add asterisks for NA values (valid samples with missing data)
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "sample_id", y = "ReadsDeduped", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
plot_grid(p, p_reads)
plot_grid(p, p_reads,
align = "v")
plot_grid(p, p_reads,
nrow = "2"
align = "v")
plot_grid(p, p_reads,
nrow = 2
align = "v")
plot_grid(p, p_reads,
nrow = 2,
align = "v")
p_reads <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = ReadsDeduped),
stat = "identity", position = "dodge") +
# Add asterisks for NA values (valid samples with missing data)
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "sample_id", y = "ReadsDeduped", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p_reads)
p_reads <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = ReadsDeduped),
stat = "identity", position = "dodge") +
# Add asterisks for NA values (valid samples with missing data)
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "sample_id", y = "ReadsDeduped") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p_reads)
p_reads <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.long, aes(x = factor(sample_id), y = ReadsDeduped),
stat = "identity", position = "dodge") +
# Add asterisks for NA values (valid samples with missing data)
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "sample_id", y = "ReadsDeduped") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p_reads)
View(dt.long)
dt.main_filtered_reads <- mutate(dt.main_filtered$sample_id, dt.filter_valid_reads$ReadsDeduped)
View(dt.main_filtered_reads)
dt.main_filtered_reads <- c(dt.main_filtered$sample_id, dt.filter_valid_reads$ReadsDeduped)
View(dt.main_filtered)
View(dt.combined)
dt.combined_reads <- dt.combined[c(sample_id, location, ReadsDeduped)]
View(dt.long)
View(dt.combined_reads)
View(dt.combined)
View(dt.combined_reads)
dt.combined_reads <- select(dt.combined, sample_id, location, ReadsDeduped)
View(dt.combined_reads)
p_reads <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.combined_reads, aes(x = factor(sample_id), y = ReadsDeduped),
stat = "identity", position = "dodge") +
# Add asterisks for NA values (valid samples with missing data)
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "ReadsDeduped") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p_reads)
p_reads <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.combined_reads, aes(x = factor(sample_id), y = ReadsDeduped),
stat = "identity", position = "dodge") +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "ReadsDeduped") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p_reads)
p_reads <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.combined_reads, aes(x = factor(sample_id), y = ReadsDeduped),
stat = "identity", position = "dodge") +
facet_grid(location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "ReadsDeduped") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p_reads)
?facet_grid
p_reads <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.combined_reads, aes(x = factor(sample_id), y = ReadsDeduped),
stat = "identity", position = "dodge") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "ReadsDeduped") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p_reads)
p_reads <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.combined_reads, aes(x = factor(sample_id), y = ReadsDeduped),
stat = "identity", position = "dodge") +
facet_grid( ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "ReadsDeduped") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p_reads)
dt.combined_reads$location <- factor(dt.combined_reads$location, levels = custom_order)
# Create the bar plot with asterisks for NA values
p <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = value, fill = dog),
stat = "identity", position = "dodge") +
# Add asterisks for NA values (valid samples with missing data)
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
p_reads <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.combined_reads, aes(x = factor(sample_id), y = ReadsDeduped),
stat = "identity", position = "dodge") +
facet_grid( ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "ReadsDeduped") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p_reads)
plot_grid(p, p_reads,
nrow = 2,
align = "v")
plot_grid(p, p_reads,
labels = "AUTO",
nrow = 2,
align = "v")
plot_grid(p, p_reads,
labels = "AUTO",
nrow = 2,
align = "v",
rel_heights = c(2,1))
grid.draw(rbind(p, p_reads, size = "first"))
library(gridExtra)
grid.draw(rbind(p, p_reads, size = "first"))
plot_grid(p, p_reads,
plot_grid(p, p_reads,
labels = "AUTO",
nrow = 2,
align = "v",
rel_heights = c(1/2, 1/4))
# Save the plot
ggsave("figures/subfig_1.png", p, width = 24, height = 20, limitsize = FALSE)
plot_grid(p, p_reads,
labels = "AUTO",
nrow = 2,
align = "v",
rel_heights = c(1/2, 1/4))
plot_grid(p, p_reads,
labels = "AUTO",
nrow = 2,
align = "v",
axis = "lr"
rel_heights = c(1/2, 1/4))
plot_grid(p, p_reads,
labels = "AUTO",
nrow = 2,
align = "v",
axis = "lr",
rel_heights = c(1/2, 1/4))
plot_grid(p, p_reads,
labels = "AUTO",
nrow = 2,
align = "v",
axis = "lr",
rel_heights = c(1/2, 1/3))
p_grid <- plot_grid(p, p_reads,
labels = "AUTO",
nrow = 2,    #diagramms in two rows
align = "v",
axis = "lr", # alignment along left and right (x-axis)
rel_heights = c(1/2, 1/3)) # heights of the diagramms
p_reads <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.combined_reads, aes(x = factor(sample_id), y = ReadsDeduped),
stat = "identity", position = "dodge") +
facet_grid( ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "ReadsDeduped by Sample and Location (Filtered)",
x = "Sample ID", y = "ReadsDeduped") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
p_grid <- plot_grid(p, p_reads,
labels = "AUTO",
nrow = 2,    #diagramms in two rows
align = "v",
axis = "lr", # alignment along left and right (x-axis)
rel_heights = c(1/2, 1/3)) # heights of the diagramms
# Save the plot
ggsave("figures/subfig_1.png", p_grid, width = 24, height = 20, limitsize = FALSE)
p_grid <- plot_grid(p, p_reads,
labels = "AUTO",
nrow = 2,    #diagramms in two rows
align = "v",
axis = "lr", # alignment along left and right (x-axis)
rel_heights = c(1/2, 1/3)) # heights of the diagramms
